#!/usr/bin/env python3
"""
Test complet du syst√®me de notifications ESAG GED
"""

import sys
import os
import requests
import json
import time
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_server_connection():
    """Tester la connexion au serveur"""
    print("üåê TEST CONNEXION SERVEUR")
    print("=" * 30)
    
    try:
        response = requests.get('http://localhost:5000', timeout=5)
        print(f"‚úÖ Serveur accessible (Status: {response.status_code})")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur non accessible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur connexion: {str(e)}")
        return False

def test_notification_api():
    """Tester l'API des notifications"""
    print("\nüîî TEST API NOTIFICATIONS")
    print("=" * 30)
    
    # Donn√©es de test pour la connexion
    login_data = {
        "email": "admin@esag.com",
        "password": "admin123"
    }
    
    try:
        # Connexion
        print("üîê Connexion...")
        login_response = requests.post(
            'http://localhost:5000/api/auth/login',
            json=login_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if login_response.status_code != 200:
            print(f"‚ùå √âchec connexion: {login_response.status_code}")
            return False
        
        token = login_response.json().get('token')
        if not token:
            print("‚ùå Token non re√ßu")
            return False
        
        print("‚úÖ Connexion r√©ussie")
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        # Test 1: R√©cup√©rer les notifications
        print("\nüìã Test r√©cup√©ration notifications...")
        notif_response = requests.get(
            'http://localhost:5000/api/notifications',
            headers=headers
        )
        
        if notif_response.status_code == 200:
            notifications = notif_response.json().get('notifications', [])
            print(f"‚úÖ {len(notifications)} notifications r√©cup√©r√©es")
        else:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration notifications: {notif_response.status_code}")
        
        # Test 2: R√©cup√©rer le nombre de non lues
        print("\nüî¢ Test comptage non lues...")
        count_response = requests.get(
            'http://localhost:5000/api/notifications/unread-count',
            headers=headers
        )
        
        if count_response.status_code == 200:
            unread_count = count_response.json().get('unread_count', 0)
            print(f"‚úÖ {unread_count} notifications non lues")
        else:
            print(f"‚ö†Ô∏è Erreur comptage: {count_response.status_code}")
        
        # Test 3: R√©cup√©rer les statistiques
        print("\nüìä Test statistiques...")
        stats_response = requests.get(
            'http://localhost:5000/api/notifications/stats',
            headers=headers
        )
        
        if stats_response.status_code == 200:
            stats = stats_response.json()
            print(f"‚úÖ Statistiques r√©cup√©r√©es: {stats.get('general', {}).get('total', 0)} total")
        else:
            print(f"‚ö†Ô∏è Erreur statistiques: {stats_response.status_code}")
        
        # Test 4: R√©cup√©rer les pr√©f√©rences
        print("\n‚öôÔ∏è Test pr√©f√©rences...")
        prefs_response = requests.get(
            'http://localhost:5000/api/notifications/preferences',
            headers=headers
        )
        
        if prefs_response.status_code == 200:
            preferences = prefs_response.json().get('preferences', {})
            print(f"‚úÖ Pr√©f√©rences r√©cup√©r√©es: email={preferences.get('email_notifications', 'N/A')}")
        else:
            print(f"‚ö†Ô∏è Erreur pr√©f√©rences: {prefs_response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test API: {str(e)}")
        return False

def test_notification_creation():
    """Tester la cr√©ation de notifications"""
    print("\nüÜï TEST CR√âATION NOTIFICATIONS")
    print("=" * 35)
    
    try:
        from AppFlask import create_app
        from AppFlask.services.notification_service import notification_service
        
        app = create_app()
        with app.app_context():
            # Test cr√©ation notification simple
            print("üìù Cr√©ation notification de test...")
            
            notification_id = notification_service.create_notification(
                user_id=1,
                title="Test syst√®me de notifications",
                message="Ceci est une notification de test pour v√©rifier le bon fonctionnement du syst√®me",
                notification_type="test",
                priority=2,
                send_email=False
            )
            
            if notification_id:
                print(f"‚úÖ Notification cr√©√©e (ID: {notification_id})")
                
                # Test cr√©ation notification avec m√©tadonn√©es
                print("üìù Cr√©ation notification avec m√©tadonn√©es...")
                
                notification_id_2 = notification_service.create_notification(
                    user_id=1,
                    title="Test avec m√©tadonn√©es",
                    message="Notification avec des donn√©es suppl√©mentaires",
                    notification_type="document_uploaded",
                    priority=3,
                    metadata={
                        'document_title': 'Document de test',
                        'document_type': 'PDF',
                        'test_data': 'Donn√©es de test'
                    },
                    send_email=False
                )
                
                if notification_id_2:
                    print(f"‚úÖ Notification avec m√©tadonn√©es cr√©√©e (ID: {notification_id_2})")
                else:
                    print("‚ùå √âchec cr√©ation notification avec m√©tadonn√©es")
                
                return True
            else:
                print("‚ùå √âchec cr√©ation notification")
                return False
        
    except Exception as e:
        print(f"‚ùå Erreur test cr√©ation: {str(e)}")
        return False

def test_email_notifications():
    """Tester les notifications par email"""
    print("\nüìß TEST NOTIFICATIONS EMAIL")
    print("=" * 30)
    
    try:
        from AppFlask import create_app
        from AppFlask.services.email_service import email_service
        
        app = create_app()
        with app.app_context():
            # Test configuration email
            print("üîß V√©rification configuration email...")
            
            if email_service.is_configured():
                print("‚úÖ Service email configur√©")
                
                # Test connexion SMTP
                print("üîó Test connexion SMTP...")
                if email_service.test_connection():
                    print("‚úÖ Connexion SMTP r√©ussie")
                    
                    # Test envoi email de notification
                    print("üì§ Test envoi email notification...")
                    
                    email_data = {
                        'user_name': 'Utilisateur Test',
                        'notification_title': 'Test syst√®me de notifications',
                        'notification_message': 'Ceci est un test du syst√®me de notifications par email',
                        'notification_type': 'test',
                        'date': datetime.now().strftime('%d/%m/%Y √† %H:%M'),
                        'login_url': 'http://localhost:3000/notifications'
                    }
                    
                    email_sent = email_service.send_template_email(
                        to=['mainuser1006@gmail.com'],  # Email de test
                        template_name='notification_general',
                        subject='ESAG GED - Test syst√®me de notifications',
                        template_data=email_data
                    )
                    
                    if email_sent:
                        print("‚úÖ Email de notification envoy√© avec succ√®s")
                        return True
                    else:
                        print("‚ùå √âchec envoi email")
                        return False
                else:
                    print("‚ùå √âchec connexion SMTP")
                    return False
            else:
                print("‚ùå Service email non configur√©")
                return False
        
    except Exception as e:
        print(f"‚ùå Erreur test email: {str(e)}")
        return False

def test_notification_templates():
    """Tester les templates de notifications"""
    print("\nüìù TEST TEMPLATES NOTIFICATIONS")
    print("=" * 35)
    
    try:
        from AppFlask import create_app
        from AppFlask.db import db_connection
        from psycopg2.extras import RealDictCursor
        
        app = create_app()
        with app.app_context():
            conn = db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            
            # V√©rifier les templates en base
            print("üîç V√©rification templates en base...")
            
            cursor.execute("SELECT name, title_template FROM notification_templates WHERE is_active = true")
            templates = cursor.fetchall()
            
            print(f"‚úÖ {len(templates)} templates actifs trouv√©s:")
            for template in templates:
                print(f"   ‚Ä¢ {template['name']}: {template['title_template']}")
            
            # V√©rifier le template email
            print("\nüìß V√©rification template email...")
            
            cursor.execute("SELECT name, subject FROM email_templates WHERE name = 'notification_general'")
            email_template = cursor.fetchone()
            
            if email_template:
                print(f"‚úÖ Template email trouv√©: {email_template['subject']}")
            else:
                print("‚ùå Template email non trouv√©")
            
            cursor.close()
            conn.close()
            
            return len(templates) > 0 and email_template is not None
        
    except Exception as e:
        print(f"‚ùå Erreur test templates: {str(e)}")
        return False

def test_notification_preferences():
    """Tester les pr√©f√©rences de notifications"""
    print("\n‚öôÔ∏è TEST PR√âF√âRENCES NOTIFICATIONS")
    print("=" * 35)
    
    try:
        from AppFlask import create_app
        from AppFlask.db import db_connection
        from psycopg2.extras import RealDictCursor
        
        app = create_app()
        with app.app_context():
            conn = db_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            
            # V√©rifier les pr√©f√©rences par d√©faut
            print("üîç V√©rification pr√©f√©rences utilisateurs...")
            
            cursor.execute("""
                SELECT u.nom, u.prenom, p.email_notifications, p.app_notifications
                FROM utilisateur u
                LEFT JOIN user_notification_preferences p ON u.id = p.user_id
                LIMIT 5
            """)
            
            users_prefs = cursor.fetchall()
            
            print(f"‚úÖ Pr√©f√©rences v√©rifi√©es pour {len(users_prefs)} utilisateurs:")
            for user in users_prefs:
                email_pref = user['email_notifications'] if user['email_notifications'] is not None else 'Non d√©fini'
                app_pref = user['app_notifications'] if user['app_notifications'] is not None else 'Non d√©fini'
                print(f"   ‚Ä¢ {user['prenom']} {user['nom']}: Email={email_pref}, App={app_pref}")
            
            cursor.close()
            conn.close()
            
            return len(users_prefs) > 0
        
    except Exception as e:
        print(f"‚ùå Erreur test pr√©f√©rences: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    print("üîî TEST COMPLET DU SYST√àME DE NOTIFICATIONS ESAG GED")
    print("=" * 65)
    print(f"üìÖ Date: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    tests = [
        ("Connexion serveur", test_server_connection),
        ("API notifications", test_notification_api),
        ("Cr√©ation notifications", test_notification_creation),
        ("Templates notifications", test_notification_templates),
        ("Pr√©f√©rences notifications", test_notification_preferences),
        ("Notifications email", test_email_notifications)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ EX√âCUTION: {test_name}")
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: R√âUSSI")
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {str(e)}")
            results.append((test_name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 65)
    print("üéØ R√âSUM√â DES TESTS")
    print("=" * 65)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:.<40} {status}")
        if result:
            success_count += 1
    
    print(f"\nüìä R√âSULTAT GLOBAL: {success_count}/{len(results)} tests r√©ussis")
    
    if success_count == len(results):
        print("\nüéâ SYST√àME DE NOTIFICATIONS ENTI√àREMENT FONCTIONNEL!")
        print("\nüöÄ FONCTIONNALIT√âS VALID√âES:")
        print("‚úÖ API de notifications compl√®te")
        print("‚úÖ Cr√©ation et gestion des notifications")
        print("‚úÖ Templates de notifications")
        print("‚úÖ Pr√©f√©rences utilisateur")
        print("‚úÖ Notifications par email")
        print("‚úÖ Int√©gration avec le syst√®me existant")
        
        print("\nüìã UTILISATION:")
        print("‚Ä¢ Interface web: http://localhost:3000/notifications")
        print("‚Ä¢ API: http://localhost:5000/api/notifications")
        print("‚Ä¢ Pr√©f√©rences: Param√®tres utilisateur")
        print("‚Ä¢ Email: Automatique selon pr√©f√©rences")
        
    elif success_count >= len(results) * 0.8:
        print("\n‚ö†Ô∏è SYST√àME MAJORITAIREMENT FONCTIONNEL")
        print("Quelques fonctionnalit√©s peuvent n√©cessiter des ajustements")
        
    else:
        print("\n‚ùå SYST√àME N√âCESSITE DES CORRECTIONS")
        print("V√©rifiez les erreurs ci-dessus et corrigez les probl√®mes")
    
    print(f"\nüìù Test termin√© √† {datetime.now().strftime('%H:%M:%S')}")
    
    return success_count >= len(results) * 0.8

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 