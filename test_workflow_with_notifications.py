#!/usr/bin/env python3
"""
Test complet du syst√®me de workflow de validation avec notifications
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import json
import tempfile
from datetime import datetime

class WorkflowNotificationTester:
    def __init__(self):
        self.base_url = "http://localhost:5000"
        self.admin_token = None
        self.chef_token = None
        self.user_token = None
        self.test_document_id = None
        self.workflow_instance_id = None
        
    def authenticate_users(self):
        """Authentifier les diff√©rents utilisateurs"""
        print("üîê AUTHENTIFICATION DES UTILISATEURS")
        print("=" * 40)
        
        # Admin
        try:
            response = requests.post(f"{self.base_url}/api/auth/login", json={
                'email': 'admin@esag.com',
                'password': 'admin123'
            })
            if response.status_code == 200:
                self.admin_token = response.json().get('access_token')
                print("‚úÖ Admin authentifi√©")
            else:
                print(f"‚ùå √âchec authentification admin: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur authentification admin: {e}")
        
        # Chef de service
        try:
            response = requests.post(f"{self.base_url}/api/auth/login", json={
                'email': 'chef@esag.com',
                'password': 'password123'
            })
            if response.status_code == 200:
                self.chef_token = response.json().get('access_token')
                print("‚úÖ Chef de service authentifi√©")
            else:
                print(f"‚ùå √âchec authentification chef: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur authentification chef: {e}")
        
        # Utilisateur normal
        try:
            response = requests.post(f"{self.base_url}/api/auth/login", json={
                'email': 'user@esag.com',
                'password': 'password123'
            })
            if response.status_code == 200:
                self.user_token = response.json().get('access_token')
                print("‚úÖ Utilisateur authentifi√©")
            else:
                print(f"‚ùå √âchec authentification utilisateur: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur authentification utilisateur: {e}")
    
    def create_test_document(self):
        """Cr√©er un document de test"""
        print("\nüìÑ CR√âATION DOCUMENT DE TEST")
        print("=" * 30)
        
        if not self.user_token:
            print("‚ùå Token utilisateur requis")
            return False
        
        try:
            # Cr√©er un fichier temporaire
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
                temp_file.write("Document de test pour workflow de validation avec notifications")
                temp_file_path = temp_file.name
            
            try:
                with open(temp_file_path, 'rb') as f:
                    files = {'file': ('test_workflow_notifications.txt', f, 'text/plain')}
                    data = {
                        'titre': 'Document Test Workflow Notifications',
                        'description': 'Document cr√©√© pour tester le syst√®me complet de workflow avec notifications'
                    }
                    
                    response = requests.post(
                        f"{self.base_url}/api/documents_unified",
                        headers={'Authorization': f'Bearer {self.user_token}'},
                        files=files,
                        data=data
                    )
                
                if response.status_code in [200, 201]:
                    result = response.json()
                    self.test_document_id = result.get('id') or result.get('data', {}).get('id')
                    print(f"‚úÖ Document cr√©√© avec ID: {self.test_document_id}")
                    return True
                else:
                    print(f"‚ùå Erreur cr√©ation document: {response.status_code} - {response.text}")
                    return False
            finally:
                os.unlink(temp_file_path)
                
        except Exception as e:
            print(f"‚ùå Exception cr√©ation document: {e}")
            return False
    
    def start_validation_workflow(self):
        """D√©marrer le workflow de validation"""
        print("\n‚ö° D√âMARRAGE WORKFLOW DE VALIDATION")
        print("=" * 35)
        
        if not self.user_token or not self.test_document_id:
            print("‚ùå Token utilisateur et document requis")
            return False
        
        try:
            response = requests.post(
                f"{self.base_url}/api/validation-workflow/start",
                headers={
                    'Authorization': f'Bearer {self.user_token}',
                    'Content-Type': 'application/json'
                },
                json={
                    'document_id': self.test_document_id,
                    'commentaire': 'Test du workflow avec notifications automatiques'
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                self.workflow_instance_id = result.get('data', {}).get('instance_id')
                print(f"‚úÖ Workflow d√©marr√© - Instance ID: {self.workflow_instance_id}")
                print(f"   Statut: {result.get('data', {}).get('status')}")
                print(f"   √âtape courante: {result.get('data', {}).get('etape_courante_id')}")
                return True
            else:
                print(f"‚ùå Erreur d√©marrage workflow: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception d√©marrage workflow: {e}")
            return False
    
    def check_pending_approvals(self, token, user_type):
        """V√©rifier les approbations en attente"""
        print(f"\nüìã APPROBATIONS EN ATTENTE ({user_type})")
        print("=" * 30)
        
        if not token:
            print(f"‚ùå Token {user_type} requis")
            return False
        
        try:
            response = requests.get(
                f"{self.base_url}/api/validation-workflow/pending",
                headers={'Authorization': f'Bearer {token}'}
            )
            
            if response.status_code == 200:
                result = response.json()
                approvals = result.get('data', [])
                print(f"‚úÖ {len(approvals)} approbation(s) en attente pour {user_type}")
                
                for approval in approvals:
                    print(f"   üìÑ Document: {approval.get('document_titre')}")
                    print(f"   üîÑ √âtape: {approval.get('etape_nom')}")
                    print(f"   üë§ Demandeur: {approval.get('initiateur_prenom')} {approval.get('initiateur_nom')}")
                    print(f"   üìÖ Date: {approval.get('date_creation')}")
                    print()
                
                return len(approvals) > 0
            else:
                print(f"‚ùå Erreur r√©cup√©ration approbations: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception r√©cup√©ration approbations: {e}")
            return False
    
    def check_notifications(self, token, user_type):
        """V√©rifier les notifications"""
        print(f"\nüîî NOTIFICATIONS ({user_type})")
        print("=" * 20)
        
        if not token:
            print(f"‚ùå Token {user_type} requis")
            return False
        
        try:
            # Essayer plusieurs endpoints de notifications
            endpoints = [
                "/api/notifications",
                "/api/notifications/unread",
                "/api/user/notifications"
            ]
            
            for endpoint in endpoints:
                try:
                    response = requests.get(
                        f"{self.base_url}{endpoint}",
                        headers={'Authorization': f'Bearer {token}'}
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        notifications = result if isinstance(result, list) else result.get('data', [])
                        print(f"‚úÖ {len(notifications)} notification(s) trouv√©e(s) via {endpoint}")
                        
                        for notif in notifications[:3]:  # Afficher les 3 premi√®res
                            print(f"   üîî {notif.get('title', notif.get('titre', 'Sans titre'))}")
                            print(f"      Message: {notif.get('message', 'Sans message')}")
                            print(f"      Type: {notif.get('type', 'Inconnu')}")
                            print()
                        
                        return True
                except Exception as e:
                    continue
            
            print(f"‚ùå Aucun endpoint de notifications fonctionnel pour {user_type}")
            return False
            
        except Exception as e:
            print(f"‚ùå Exception v√©rification notifications: {e}")
            return False
    
    def test_chef_approval(self):
        """Tester l'approbation par le chef de service"""
        print("\n‚úÖ TEST APPROBATION CHEF DE SERVICE")
        print("=" * 35)
        
        if not self.chef_token or not self.workflow_instance_id:
            print("‚ùå Token chef et instance workflow requis")
            return False
        
        try:
            # R√©cup√©rer les d√©tails de l'instance pour obtenir l'√©tape courante
            response = requests.get(
                f"{self.base_url}/api/validation-workflow/instance/{self.workflow_instance_id}",
                headers={'Authorization': f'Bearer {self.chef_token}'}
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erreur r√©cup√©ration instance: {response.status_code}")
                return False
            
            instance = response.json().get('data', {})
            etape_courante_id = instance.get('etape_courante_id')
            
            if not etape_courante_id:
                print("‚ùå √âtape courante non trouv√©e")
                return False
            
            # Approuver
            response = requests.post(
                f"{self.base_url}/api/validation-workflow/approve",
                headers={
                    'Authorization': f'Bearer {self.chef_token}',
                    'Content-Type': 'application/json'
                },
                json={
                    'instance_id': self.workflow_instance_id,
                    'etape_id': etape_courante_id,
                    'decision': 'APPROUVE',
                    'commentaire': 'Document approuv√© par le chef de service - test notifications'
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Approbation chef de service r√©ussie")
                print(f"   Message: {result.get('message')}")
                print(f"   Prochaine √©tape: {result.get('data', {}).get('next_step')}")
                return True
            else:
                print(f"‚ùå Erreur approbation chef: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception approbation chef: {e}")
            return False
    
    def test_admin_approval(self):
        """Tester l'approbation finale par l'admin (directeur)"""
        print("\n‚úÖ TEST APPROBATION FINALE (DIRECTEUR)")
        print("=" * 35)
        
        if not self.admin_token or not self.workflow_instance_id:
            print("‚ùå Token admin et instance workflow requis")
            return False
        
        try:
            # R√©cup√©rer les d√©tails de l'instance pour obtenir l'√©tape courante
            response = requests.get(
                f"{self.base_url}/api/validation-workflow/instance/{self.workflow_instance_id}",
                headers={'Authorization': f'Bearer {self.admin_token}'}
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erreur r√©cup√©ration instance: {response.status_code}")
                return False
            
            instance = response.json().get('data', {})
            etape_courante_id = instance.get('etape_courante_id')
            
            if not etape_courante_id:
                print("‚ùå √âtape courante non trouv√©e")
                return False
            
            # Approuver
            response = requests.post(
                f"{self.base_url}/api/validation-workflow/approve",
                headers={
                    'Authorization': f'Bearer {self.admin_token}',
                    'Content-Type': 'application/json'
                },
                json={
                    'instance_id': self.workflow_instance_id,
                    'etape_id': etape_courante_id,
                    'decision': 'APPROUVE',
                    'commentaire': 'Document approuv√© par le directeur - validation finale compl√®te'
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Approbation finale r√©ussie")
                print(f"   Message: {result.get('message')}")
                print(f"   Statut final: {result.get('data', {}).get('status')}")
                return True
            else:
                print(f"‚ùå Erreur approbation finale: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception approbation finale: {e}")
            return False
    
    def check_final_status(self):
        """V√©rifier le statut final du document et workflow"""
        print("\nüéØ V√âRIFICATION STATUT FINAL")
        print("=" * 30)
        
        if not self.user_token or not self.test_document_id:
            print("‚ùå Token utilisateur et document requis")
            return False
        
        try:
            # V√©rifier le statut du workflow pour le document
            response = requests.get(
                f"{self.base_url}/api/validation-workflow/document/{self.test_document_id}/status",
                headers={'Authorization': f'Bearer {self.user_token}'}
            )
            
            if response.status_code == 200:
                result = response.json()
                status_data = result.get('data', {})
                print("‚úÖ Statut final du workflow:")
                print(f"   üìÑ Document ID: {self.test_document_id}")
                print(f"   üîÑ Statut workflow: {status_data.get('workflow_status')}")
                print(f"   üìä Statut document: {status_data.get('document_status')}")
                print(f"   ‚è±Ô∏è  Dur√©e totale: {status_data.get('duration', 'N/A')}")
                print(f"   üìà √âtapes compl√©t√©es: {status_data.get('completed_steps', 0)}/{status_data.get('total_steps', 0)}")
                return True
            else:
                print(f"‚ùå Erreur v√©rification statut: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception v√©rification statut: {e}")
            return False
    
    def run_complete_test(self):
        """Ex√©cuter le test complet"""
        print("üöÄ TEST COMPLET WORKFLOW + NOTIFICATIONS")
        print("=" * 50)
        print(f"‚è∞ D√©but du test: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        results = {
            'authentication': False,
            'document_creation': False,
            'workflow_start': False,
            'chef_pending': False,
            'chef_notifications': False,
            'chef_approval': False,
            'admin_pending': False,
            'admin_notifications': False,
            'admin_approval': False,
            'final_status': False
        }
        
        # 1. Authentification
        self.authenticate_users()
        results['authentication'] = all([self.admin_token, self.chef_token, self.user_token])
        
        # 2. Cr√©ation document
        if results['authentication']:
            results['document_creation'] = self.create_test_document()
        
        # 3. D√©marrage workflow
        if results['document_creation']:
            results['workflow_start'] = self.start_validation_workflow()
        
        # 4. V√©rifications chef de service
        if results['workflow_start']:
            results['chef_pending'] = self.check_pending_approvals(self.chef_token, "Chef de service")
            results['chef_notifications'] = self.check_notifications(self.chef_token, "Chef de service")
            
            # 5. Approbation chef
            if results['chef_pending']:
                results['chef_approval'] = self.test_chef_approval()
        
        # 6. V√©rifications admin (directeur)
        if results['chef_approval']:
            results['admin_pending'] = self.check_pending_approvals(self.admin_token, "Admin/Directeur")
            results['admin_notifications'] = self.check_notifications(self.admin_token, "Admin/Directeur")
            
            # 7. Approbation finale
            if results['admin_pending']:
                results['admin_approval'] = self.test_admin_approval()
        
        # 8. Statut final
        if results['admin_approval']:
            results['final_status'] = self.check_final_status()
        
        # R√©sum√©
        print("\nüìä R√âSUM√â DU TEST")
        print("=" * 25)
        
        total_tests = len(results)
        passed_tests = sum(results.values())
        
        for test_name, passed in results.items():
            status = "‚úÖ R√âUSSI" if passed else "‚ùå √âCHOU√â"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
        
        print(f"\nüéØ SCORE: {passed_tests}/{total_tests} tests r√©ussis ({(passed_tests/total_tests)*100:.1f}%)")
        
        if passed_tests == total_tests:
            print("\nüéâ TOUS LES TESTS R√âUSSIS!")
            print("‚úÖ Le syst√®me de workflow avec notifications fonctionne parfaitement")
        elif passed_tests >= total_tests * 0.8:
            print("\n‚úÖ SYST√àME FONCTIONNEL")
            print("‚ö†Ô∏è Quelques am√©liorations mineures n√©cessaires")
        else:
            print("\n‚ö†Ô∏è SYST√àME PARTIELLEMENT FONCTIONNEL")
            print("üîß Des corrections sont n√©cessaires")
        
        return passed_tests == total_tests

def main():
    """Fonction principale"""
    tester = WorkflowNotificationTester()
    success = tester.run_complete_test()
    return success

if __name__ == "__main__":
    main() 