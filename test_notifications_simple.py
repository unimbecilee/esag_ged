#!/usr/bin/env python3
"""
Test simple du syst√®me de notifications
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from AppFlask.db import db_connection
from psycopg2.extras import RealDictCursor
import logging

logger = logging.getLogger(__name__)

def test_notification_creation():
    """Test de cr√©ation de notification simple"""
    print("üß™ TEST DE CR√âATION DE NOTIFICATION")
    print("=" * 40)
    
    try:
        conn = db_connection()
        if not conn:
            print("‚ùå Erreur de connexion √† la base de donn√©es")
            return False
        
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # R√©cup√©rer un utilisateur pour le test
        cursor.execute("SELECT id, nom, prenom FROM utilisateur LIMIT 1")
        user = cursor.fetchone()
        
        if not user:
            print("‚ùå Aucun utilisateur trouv√© pour le test")
            return False
        
        print(f"üë§ Test avec l'utilisateur: {user['prenom']} {user['nom']}")
        
        # Cr√©er une notification de test simple
        cursor.execute("""
            INSERT INTO notifications (
                user_id, title, message, type, priority, 
                metadata, created_at
            )
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
            RETURNING id
        """, (
            user['id'],
            'Test syst√®me de notifications',
            'Ceci est une notification de test pour v√©rifier le fonctionnement du syst√®me.',
            'system_test',
            2,
            '{"test": true, "created_by": "test_script"}'
        ))
        
        notification_id = cursor.fetchone()['id']
        conn.commit()
        
        print(f"‚úÖ Notification cr√©√©e avec l'ID: {notification_id}")
        
        # V√©rifier le nombre de notifications non lues
        cursor.execute("""
            SELECT COUNT(*) as count
            FROM notifications 
            WHERE user_id = %s AND is_read = false
        """, (user['id'],))
        
        unread_count = cursor.fetchone()['count']
        print(f"üìä Nombre de notifications non lues: {unread_count}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        return False

def test_notification_preferences():
    """Test des pr√©f√©rences de notification"""
    print("\n‚öôÔ∏è TEST DES PR√âF√âRENCES")
    print("=" * 30)
    
    try:
        conn = db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # V√©rifier les pr√©f√©rences existantes
        cursor.execute("""
            SELECT COUNT(*) as count
            FROM user_notification_preferences
        """)
        
        prefs_count = cursor.fetchone()['count']
        print(f"üë• Pr√©f√©rences configur√©es pour {prefs_count} utilisateurs")
        
        # Cr√©er des pr√©f√©rences pour les utilisateurs sans pr√©f√©rences
        cursor.execute("""
            INSERT INTO user_notification_preferences (user_id)
            SELECT u.id 
            FROM utilisateur u
            WHERE NOT EXISTS (
                SELECT 1 FROM user_notification_preferences p 
                WHERE p.user_id = u.id
            )
        """)
        
        new_prefs = cursor.rowcount
        if new_prefs > 0:
            print(f"‚úÖ {new_prefs} nouvelles pr√©f√©rences cr√©√©es")
            conn.commit()
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test pr√©f√©rences: {str(e)}")
        return False

def test_notification_api():
    """Test simple de l'API de notifications"""
    print("\nüåê TEST API NOTIFICATIONS")
    print("=" * 30)
    
    try:
        # Importer le service de notifications
        from AppFlask.services.notification_service import NotificationService
        
        conn = db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # R√©cup√©rer un utilisateur
        cursor.execute("SELECT id FROM utilisateur LIMIT 1")
        user = cursor.fetchone()
        
        if user:
            # Tester la cr√©ation de notification via le service
            notification_id = NotificationService.create_notification(
                user_id=user['id'],
                title='Test API Service',
                message='Test de cr√©ation de notification via le service API',
                notification_type='test',
                priority=1,
                send_email=False  # Pas d'email pour le test
            )
            
            if notification_id:
                print(f"‚úÖ Notification cr√©√©e via API: {notification_id}")
            else:
                print("‚ùå √âchec cr√©ation via API")
        
        cursor.close()
        conn.close()
        
        return notification_id is not None
        
    except Exception as e:
        print(f"‚ùå Erreur test API: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    print("üîî TEST SYST√àME DE NOTIFICATIONS - VERSION SIMPLE")
    print("=" * 55)
    
    # Test de cr√©ation basique
    creation_test = test_notification_creation()
    
    # Test des pr√©f√©rences
    preferences_test = test_notification_preferences()
    
    # Test de l'API
    api_test = test_notification_api()
    
    print("\nüéØ R√âSULTATS DES TESTS")
    print("=" * 25)
    print(f"Cr√©ation notification: {'‚úÖ R√âUSSI' if creation_test else '‚ùå √âCHOU√â'}")
    print(f"Pr√©f√©rences utilisateur: {'‚úÖ R√âUSSI' if preferences_test else '‚ùå √âCHOU√â'}")
    print(f"API Service: {'‚úÖ R√âUSSI' if api_test else '‚ùå √âCHOU√â'}")
    
    if creation_test and preferences_test and api_test:
        print("\nüéâ SYST√àME DE NOTIFICATIONS FONCTIONNEL!")
        print("\nüìã V√âRIFICATIONS √Ä FAIRE:")
        print("1. V√©rifier l'affichage des notifications dans l'interface")
        print("2. Tester le badge de notification dans la sidebar")
        print("3. Tester les clics sur les notifications")
        print("4. V√©rifier les notifications de workflow")
        print("5. Tester les demandes d'archivage")
        
        return True
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        return False

if __name__ == "__main__":
    main() 