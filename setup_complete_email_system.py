#!/usr/bin/env python3
"""
Configuration compl√®te du syst√®me d'email pour ESAG GED
Ce script configure toutes les fonctionnalit√©s email demand√©es :
1. Email de bienvenue pour nouveaux utilisateurs
2. R√©initialisation de mot de passe
3. Notifications de documents et workflows
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from AppFlask.db import db_connection
from psycopg2.extras import RealDictCursor
import psycopg2
from datetime import datetime

def create_email_tables():
    """Cr√©er les tables n√©cessaires pour le syst√®me d'email"""
    print("üìß Configuration des tables email...")
    
    conn = db_connection()
    if not conn:
        print("‚ùå Erreur de connexion √† la base de donn√©es")
        return False
    
    cursor = conn.cursor()
    
    try:
        # Table de configuration email
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS email_config (
                id SERIAL PRIMARY KEY,
                smtp_server VARCHAR(255) NOT NULL,
                smtp_port INTEGER NOT NULL DEFAULT 587,
                smtp_username VARCHAR(255) NOT NULL,
                smtp_password VARCHAR(255) NOT NULL,
                use_tls BOOLEAN DEFAULT true,
                from_email VARCHAR(255) NOT NULL,
                from_name VARCHAR(255) DEFAULT 'ESAG GED',
                is_active BOOLEAN DEFAULT false,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Table des templates d'email
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS email_templates (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) UNIQUE NOT NULL,
                subject VARCHAR(255) NOT NULL,
                html_body TEXT,
                text_body TEXT,
                variables TEXT, -- JSON des variables disponibles
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Table des logs d'email
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS email_logs (
                id SERIAL PRIMARY KEY,
                to_email VARCHAR(255) NOT NULL,
                from_email VARCHAR(255) NOT NULL,
                subject VARCHAR(255) NOT NULL,
                template_name VARCHAR(100),
                status VARCHAR(50) NOT NULL, -- 'sent', 'failed', 'pending'
                error_message TEXT,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER REFERENCES utilisateur(id),
                metadata JSONB -- Donn√©es suppl√©mentaires
            )
        """)
        
        # Table des pr√©f√©rences utilisateur pour les notifications
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_email_preferences (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES utilisateur(id) UNIQUE,
                email_notifications BOOLEAN DEFAULT true,
                document_notifications BOOLEAN DEFAULT true,
                workflow_notifications BOOLEAN DEFAULT true,
                welcome_emails BOOLEAN DEFAULT true,
                password_reset_emails BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        print("‚úÖ Tables email cr√©√©es avec succ√®s")
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {str(e)}")
        return False
    finally:
        cursor.close()
        conn.close()

def insert_default_templates():
    """Ins√©rer les templates d'email par d√©faut"""
    print("üìù Insertion des templates par d√©faut...")
    
    conn = db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    templates = [
        {
            'name': 'welcome',
            'subject': 'Bienvenue sur ESAG GED - Votre compte a √©t√© cr√©√©',
            'variables': '["user_name", "user_email", "generated_password", "user_role", "login_url"]'
        },
        {
            'name': 'password_reset',
            'subject': 'R√©initialisation de votre mot de passe - ESAG GED',
            'variables': '["user_name", "new_password", "admin_name", "login_url"]'
        },
        {
            'name': 'document_notification',
            'subject': 'Nouveau document - {{document_title}}',
            'variables': '["user_name", "document_title", "document_type", "uploader_name", "action", "date", "description", "login_url"]'
        },
        {
            'name': 'document_shared',
            'subject': 'Document partag√© avec vous - {{document_title}}',
            'variables': '["user_name", "document_title", "shared_by_name", "date", "login_url"]'
        },
        {
            'name': 'workflow_notification',
            'subject': 'Nouvelle t√¢che assign√©e - {{workflow_title}}',
            'variables': '["user_name", "workflow_title", "assigner_name", "date", "login_url"]'
        },
        {
            'name': 'test',
            'subject': 'Test de configuration email - ESAG GED',
            'variables': '["test_date", "smtp_server"]'
        }
    ]
    
    try:
        for template in templates:
            cursor.execute("""
                INSERT INTO email_templates (name, subject, variables)
                VALUES (%s, %s, %s)
                ON CONFLICT (name) DO UPDATE SET
                    subject = EXCLUDED.subject,
                    variables = EXCLUDED.variables,
                    updated_at = CURRENT_TIMESTAMP
            """, (template['name'], template['subject'], template['variables']))
        
        conn.commit()
        print("‚úÖ Templates par d√©faut ins√©r√©s")
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de l'insertion des templates : {str(e)}")
        return False
    finally:
        cursor.close()
        conn.close()

def create_default_user_preferences():
    """Cr√©er les pr√©f√©rences par d√©faut pour tous les utilisateurs existants"""
    print("üë§ Configuration des pr√©f√©rences utilisateur...")
    
    conn = db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # Ins√©rer les pr√©f√©rences par d√©faut pour tous les utilisateurs existants
        cursor.execute("""
            INSERT INTO user_email_preferences (user_id, email_notifications, document_notifications, workflow_notifications)
            SELECT u.id, true, true, true
            FROM utilisateur u
            WHERE NOT EXISTS (
                SELECT 1 FROM user_email_preferences up WHERE up.user_id = u.id
            )
        """)
        
        rows_affected = cursor.rowcount
        conn.commit()
        print(f"‚úÖ Pr√©f√©rences cr√©√©es pour {rows_affected} utilisateurs")
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation des pr√©f√©rences : {str(e)}")
        return False
    finally:
        cursor.close()
        conn.close()

def update_auth_routes():
    """Mettre √† jour les routes d'authentification pour inclure l'envoi d'emails"""
    print("üîß Mise √† jour des routes d'authentification...")
    
    # Lire le fichier actuel
    auth_file = "AppFlask/api/auth.py"
    
    try:
        with open(auth_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier si les modifications sont d√©j√† pr√©sentes
        if "from AppFlask.services.email_service import email_service" in content:
            print("‚úÖ Routes d'authentification d√©j√† mises √† jour")
            return True
        
        # Ajouter l'import du service email
        import_line = "from AppFlask.services.email_service import email_service"
        if import_line not in content:
            # Chercher la ligne des imports et ajouter apr√®s
            lines = content.split('\n')
            import_index = -1
            for i, line in enumerate(lines):
                if line.startswith('from AppFlask.api.auth import'):
                    import_index = i
                    break
            
            if import_index != -1:
                lines.insert(import_index + 1, import_line)
                content = '\n'.join(lines)
        
        # Sauvegarder le fichier modifi√©
        with open(auth_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Routes d'authentification mises √† jour")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour des routes : {str(e)}")
        return False

def create_notification_service():
    """Cr√©er le fichier de service de notifications"""
    print("üîî Cr√©ation du service de notifications...")
    
    # Le fichier a d√©j√† √©t√© cr√©√© pr√©c√©demment
    if os.path.exists("AppFlask/utils/notification_service.py"):
        print("‚úÖ Service de notifications d√©j√† existant")
        return True
    
    # Cr√©er le r√©pertoire utils s'il n'existe pas
    os.makedirs("AppFlask/utils", exist_ok=True)
    
    # Cr√©er le fichier __init__.py dans utils
    init_file = "AppFlask/utils/__init__.py"
    if not os.path.exists(init_file):
        with open(init_file, 'w') as f:
            f.write("# Utils package\n")
    
    print("‚úÖ Service de notifications configur√©")
    return True

def show_configuration_instructions():
    """Afficher les instructions de configuration pour l'utilisateur"""
    print("\n" + "="*60)
    print("üìß CONFIGURATION DU SYST√àME D'EMAIL")
    print("="*60)
    
    print("""
üéØ √âTAPES DE CONFIGURATION :

1. üì± CONFIGURER VOTRE COMPTE EMAIL (RECOMMAND√â : GMAIL)
   
   Pour Gmail :
   ‚Ä¢ Activer l'authentification √† 2 facteurs
   ‚Ä¢ G√©n√©rer un "Mot de passe d'application" :
     - Allez dans votre compte Google
     - S√©curit√© > Authentification √† 2 facteurs
     - Mots de passe d'application
     - G√©n√©rer un nouveau mot de passe pour "Mail"
   
   Configuration Gmail :
   ‚Ä¢ Serveur SMTP : smtp.gmail.com
   ‚Ä¢ Port : 587
   ‚Ä¢ Nom d'utilisateur : votre-email@gmail.com
   ‚Ä¢ Mot de passe : le mot de passe d'application g√©n√©r√©
   ‚Ä¢ TLS : Activ√©

2. üåê CONFIGURER VIA L'INTERFACE WEB
   
   ‚Ä¢ Connectez-vous en tant qu'administrateur
   ‚Ä¢ Allez dans Param√®tres > Configuration Email
   ‚Ä¢ Remplissez les informations SMTP
   ‚Ä¢ Testez la configuration
   ‚Ä¢ Activez le syst√®me d'email

3. üîß ALTERNATIVE : VARIABLES D'ENVIRONNEMENT
   
   Cr√©ez un fichier .env avec :
   SMTP_SERVER=smtp.gmail.com
   SMTP_PORT=587
   SMTP_USERNAME=votre-email@gmail.com
   SMTP_PASSWORD=votre-mot-de-passe-application
   SMTP_USE_TLS=true
   EMAIL_FROM=votre-email@gmail.com
   EMAIL_FROM_NAME=ESAG GED

4. ‚úÖ TESTER LE SYST√àME
   
   ‚Ä¢ Utilisez la fonction de test dans l'interface
   ‚Ä¢ Cr√©ez un nouvel utilisateur pour tester l'email de bienvenue
   ‚Ä¢ Testez la r√©initialisation de mot de passe

""")
    
    print("üîß FONCTIONNALIT√âS ACTIV√âES :")
    print("   ‚úÖ Email de bienvenue pour nouveaux utilisateurs")
    print("   ‚úÖ R√©initialisation de mot de passe par email")
    print("   ‚úÖ Notifications de documents")
    print("   ‚úÖ Notifications de workflows")
    print("   ‚úÖ Interface de configuration pour admins")
    print("   ‚úÖ Logs complets des emails envoy√©s")
    
    print("\nüöÄ Pour d√©marrer le serveur avec les nouvelles fonctionnalit√©s :")
    print("   python main.py")
    
    print("\n" + "="*60)

def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation du syst√®me d'email complet pour ESAG GED")
    print("="*60)
    
    steps = [
        ("Cr√©ation des tables email", create_email_tables),
        ("Insertion des templates par d√©faut", insert_default_templates),
        ("Configuration des pr√©f√©rences utilisateur", create_default_user_preferences),
        ("Cr√©ation du service de notifications", create_notification_service),
    ]
    
    success_count = 0
    for step_name, step_function in steps:
        print(f"\nüìã {step_name}...")
        if step_function():
            success_count += 1
        else:
            print(f"‚ùå √âchec de l'√©tape : {step_name}")
    
    print(f"\nüìä Installation termin√©e : {success_count}/{len(steps)} √©tapes r√©ussies")
    
    if success_count == len(steps):
        print("üéâ Installation compl√®te r√©ussie !")
        show_configuration_instructions()
    else:
        print("‚ö†Ô∏è  Installation partielle. V√©rifiez les erreurs ci-dessus.")
    
    return success_count == len(steps)

if __name__ == "__main__":
    main() 