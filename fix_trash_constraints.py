#!/usr/bin/env python3
"""
Correction des contraintes de cl√© √©trang√®re dans la table trash
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from AppFlask.db import db_connection
from psycopg2.extras import RealDictCursor

def fix_trash_constraints():
    """Corriger les contraintes de cl√© √©trang√®re"""
    print("üîß CORRECTION DES CONTRAINTES DE LA CORBEILLE")
    print("=" * 45)
    
    try:
        conn = db_connection()
        if not conn:
            print("‚ùå Erreur de connexion √† la base de donn√©es")
            return False
        
        cursor = conn.cursor()
        
        # Supprimer les contraintes existantes si elles existent
        print("üóëÔ∏è Suppression des contraintes existantes...")
        
        constraints_to_drop = [
            'trash_deleted_by_fkey',
            'trash_restored_by_fkey', 
            'trash_permanent_delete_by_fkey'
        ]
        
        for constraint in constraints_to_drop:
            try:
                cursor.execute(f"""
                    ALTER TABLE trash DROP CONSTRAINT IF EXISTS {constraint}
                """)
                print(f"   ‚úÖ Contrainte {constraint} supprim√©e")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Contrainte {constraint} non trouv√©e: {e}")
        
        # Modifier les colonnes pour permettre NULL et 0
        print("üîÑ Modification des colonnes...")
        
        cursor.execute("""
            ALTER TABLE trash 
            ALTER COLUMN deleted_by DROP NOT NULL,
            ALTER COLUMN restored_by DROP NOT NULL,
            ALTER COLUMN permanent_delete_by DROP NOT NULL
        """)
        
        # Ajouter les nouvelles contraintes avec gestion du 0 (syst√®me)
        print("‚ûï Ajout des nouvelles contraintes...")
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT trash_deleted_by_fkey 
            FOREIGN KEY (deleted_by) 
            REFERENCES utilisateur(id) 
            ON DELETE SET NULL
            DEFERRABLE INITIALLY DEFERRED
        """)
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT trash_restored_by_fkey 
            FOREIGN KEY (restored_by) 
            REFERENCES utilisateur(id) 
            ON DELETE SET NULL
            DEFERRABLE INITIALLY DEFERRED
        """)
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT trash_permanent_delete_by_fkey 
            FOREIGN KEY (permanent_delete_by) 
            REFERENCES utilisateur(id) 
            ON DELETE SET NULL
            DEFERRABLE INITIALLY DEFERRED
        """)
        
        # Ajouter des contraintes CHECK pour g√©rer le cas 0 = syst√®me
        print("‚úÖ Ajout des contraintes CHECK...")
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT check_deleted_by 
            CHECK (deleted_by IS NULL OR deleted_by > 0)
        """)
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT check_restored_by 
            CHECK (restored_by IS NULL OR restored_by > 0)
        """)
        
        cursor.execute("""
            ALTER TABLE trash 
            ADD CONSTRAINT check_permanent_delete_by 
            CHECK (permanent_delete_by IS NULL OR permanent_delete_by >= 0)
        """)
        
        # Cr√©er un utilisateur syst√®me virtuel pour les op√©rations automatiques
        print("ü§ñ Cr√©ation de l'utilisateur syst√®me...")
        
        cursor.execute("""
            INSERT INTO utilisateur (
                id, nom, prenom, email, mot_de_passe, role, 
                date_creation
            ) VALUES (
                0, 'Syst√®me', 'Automatique', 'system@esag-ged.local', 
                'no_password', 'system', CURRENT_TIMESTAMP
            ) ON CONFLICT (id) DO UPDATE SET
                nom = EXCLUDED.nom,
                prenom = EXCLUDED.prenom,
                role = EXCLUDED.role
        """)
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("‚úÖ Contraintes corrig√©es avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        if 'conn' in locals():
            conn.rollback()
            cursor.close()
            conn.close()
        return False

def test_constraints():
    """Tester les nouvelles contraintes"""
    print("\nüß™ TEST DES NOUVELLES CONTRAINTES")
    print("=" * 35)
    
    try:
        conn = db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # Test 1: Insertion avec utilisateur valide
        print("1Ô∏è‚É£ Test insertion avec utilisateur valide...")
        cursor.execute("SELECT id FROM utilisateur WHERE id > 0 LIMIT 1")
        user = cursor.fetchone()
        
        if user:
            cursor.execute("""
                INSERT INTO trash (
                    item_id, item_type, item_data, deleted_by, deleted_at
                ) VALUES (
                    99999, 'test', '{"test": true}', %s, CURRENT_TIMESTAMP
                ) RETURNING id
            """, (user['id'],))
            
            test_id = cursor.fetchone()['id']
            print(f"   ‚úÖ Insertion r√©ussie avec ID: {test_id}")
            
            # Nettoyer
            cursor.execute("DELETE FROM trash WHERE id = %s", (test_id,))
        
        # Test 2: Insertion avec syst√®me (0)
        print("2Ô∏è‚É£ Test insertion avec utilisateur syst√®me (0)...")
        cursor.execute("""
            INSERT INTO trash (
                item_id, item_type, item_data, permanent_delete_by, 
                deleted_at, permanent_delete_at
            ) VALUES (
                99998, 'test', '{"test": true}', 0, 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
            ) RETURNING id
        """)
        
        test_id = cursor.fetchone()['id']
        print(f"   ‚úÖ Insertion syst√®me r√©ussie avec ID: {test_id}")
        
        # Nettoyer
        cursor.execute("DELETE FROM trash WHERE id = %s", (test_id,))
        
        # Test 3: Insertion avec NULL
        print("3Ô∏è‚É£ Test insertion avec valeurs NULL...")
        cursor.execute("""
            INSERT INTO trash (
                item_id, item_type, item_data, deleted_by, deleted_at
            ) VALUES (
                99997, 'test', '{"test": true}', NULL, CURRENT_TIMESTAMP
            ) RETURNING id
        """)
        
        test_id = cursor.fetchone()['id']
        print(f"   ‚úÖ Insertion NULL r√©ussie avec ID: {test_id}")
        
        # Nettoyer
        cursor.execute("DELETE FROM trash WHERE id = %s", (test_id,))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("‚úÖ Tous les tests de contraintes r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        if 'conn' in locals():
            conn.rollback()
            cursor.close()
            conn.close()
        return False

def main():
    """Fonction principale"""
    success = True
    
    if not fix_trash_constraints():
        success = False
    
    if not test_constraints():
        success = False
    
    if success:
        print("\nüéâ Contraintes de la corbeille corrig√©es et test√©es!")
        print("‚úÖ Le syst√®me peut maintenant g√©rer:")
        print("   - Les suppressions par utilisateurs")
        print("   - Les suppressions automatiques (syst√®me)")
        print("   - Les valeurs NULL pour les champs optionnels")
    else:
        print("\n‚ùå √âchec de la correction des contraintes")

if __name__ == "__main__":
    main() 